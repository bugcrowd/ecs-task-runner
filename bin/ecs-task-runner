#!/usr/bin/env node
'use strict'

const
  ecsTaskRunner = require('../'),
  yargs = require('yargs');

const argv = yargs
  .option('cluster', {
    alias: 'c',
    describe: 'Name of the cluster to run a task on',
    demandOption: true
  })
  .option('task-definition', {
    alias: 't',
    describe: 'The task (family:revision) to run',
    demandOption: true
  })
  .option('container-name', {
    alias: 'n',
    describe: 'Name of the container within the task definition to run',
    demandOption: true
  })
  .option('cmd', {
    describe: 'The command to run within the container',
    demandOption: true
  })
  .option('started-by', {
    describe: 'Describes who the container was started by'
  })
  .option('env', {
    array: true,
    describe: 'key=value   Pass an additional environment variable to the container',
    coerce: opts => {
      return opts.map(item => {
        let pieces = item.split('=');
        return { name: pieces[0], value: pieces[1] };
      })
    }
  })
  .option('region', {
    alias: 'r',
    default: 'us-east-1',
    describe: 'The region used when talking to ECS and CloudWatch'
  })
  .option('launch-type', {
    describe: 'Define the desired launchtype',
    default: 'EC2',
    options: ['FARGATE', 'EC2', 'EXTERNAL'],
    type: 'string'
  })
  .option('assign-public-ip', {
    describe: 'Assign the task a public ip (awsvpc configuration)',
    type: 'boolean'
  })
  .option('subnets', {
    describe: 'Subnets network configuration (awsvpc configuration)',
    type: 'array'
  })
  .option('security-groups', {
    describe: 'Security groups network configuration (awsvpc configuration)',
    type: 'array'
  })
  .option('duration-between-polls', {
    describe: 'Duration between logs polls',
    type: 'number',
    default: 1000
  })
  .option('timeout-before-first-logs', {
    describe: 'Timeout before first logs',
    type: 'number',
    default: 300 * 1000
  })
  .help()
  .wrap(yargs.terminalWidth())
  .argv;

const options = {
  clusterArn: argv.cluster,
  taskDefinitionArn: argv.taskDefinition,
  containerName: argv.containerName,
  cmd: argv.cmd,
  region: argv.region,
  startedBy: argv.startedBy,
  env: argv.env,
  launchType: argv.launchType,
  assignPublicIp: argv.assignPublicIp,
  subnets: argv.subnets,
  securityGroups: argv.securityGroups
};

ecsTaskRunner(options, function (err, stream) {
  if (err) throw err;

  stream.on('error', (err) => {
    throw err;
  });

  stream.on('end', () => {
    if (stream.logStream.exitCode > 0) {
      console.log("");
      console.log("ECS task exited with a non-zero exit status".red);
    }
    else {
      console.log("");
      console.log("ECS task exited successfully".green);
    }

    process.exit(stream.logStream.exitCode);
  });

  process.on('SIGINT', () => {
    if (stream.taskRunner && stream.taskId) {
      console.log(`Received SIGINT. Asking ECS to stop task: ${stream.taskId}`);

      const params = {
        clusterArn: options.clusterArn,
        taskId: stream.taskId,
        reason: 'User requested interrupt'
      };

      stream.taskRunner.stop(params, () => {
        stream.logStream.shutDown();
      });
    } else {
      process.exit(2);
    }
  });

  stream.pipe(process.stdout);
});
